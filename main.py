import requests
from googletrans import Translator as Tr
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import Updater, CommandHandler, CallbackContext, ConversationHandler
from translate import Translator
import os
import random

"–ß—Ç–æ–±—ã –Ω–∞–π—Ç–∏ –±–æ—Ç–∞ t.me/my_1213323bot"
TOKEN = "7040147021:AAG28PQRvnA5K-PlCiUn4UXGeCXIOGsN8t0"
API_KEY = "d6e9ab901cff0a5239be68dc4801ea5a"
translator = Translator(from_lang='en', to_lang='ru', secret_access_key='weather report')

reply_keyboard = [['/help', '/weather', '/start'],
                  ['/photo', '/weather_list', '/music']]
markup = ReplyKeyboardMarkup(reply_keyboard, one_time_keyboard=False)
reply_markup = markup


def get_music_file(folder_path):
    """
    –°–ª—É—á–∞–π–Ω–æ –≤—ã–±–∏—Ä–∞–µ—Ç –º—É–∑—ã–∫–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª –∏–∑ –ø–∞–ø–∫–∏.
    """
    music_files = [f for f in os.listdir(folder_path) if f.endswith((".mp3", ".wav", ".ogg"))]
    if music_files:
        return os.path.join(folder_path, random.choice(music_files))
    else:
        return None


def send_music(update, context):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –º—É–∑—ã–∫–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.
    """
    chat_id = update.effective_chat.id
    music_folder = f"music"  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –ø—É—Ç—å –∫ –≤–∞—à–µ–π –ø–∞–ø–∫–µ —Å –º—É–∑—ã–∫–æ–π
    music_file = get_music_file(music_folder)
    if music_file:
        context.bot.send_audio(chat_id, audio=open(music_file, 'rb'))
    else:
        context.bot.send_message(chat_id, "–ú—É–∑—ã–∫–∞–ª—å–Ω—ã–µ —Ñ–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")


def save_city(update: Update, context: CallbackContext) -> int:
    city = " ".join(context.args)
    context.user_data['city'] = city  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≥–æ—Ä–æ–¥ –≤ user_data
    update.message.reply_text(f"–ì–æ—Ä–æ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {city}")
    return ConversationHandler.END


def translate_text(text):
    translation = Tr().translate(text, dest='ru', src='en')
    return translation.text


def get_random_weather_image():
    """
    –ü–æ–ª—É—á–∞–µ—Ç —Å–ª—É—á–∞–π–Ω–æ–µ —Ñ–æ—Ç–æ –ø–æ–≥–æ–¥–Ω–æ–≥–æ —è–≤–ª–µ–Ω–∏—è —Å Unsplash.
    """
    url = "https://api.unsplash.com/photos/random"
    params = {
        "client_id": "3R7wYzg0sni89-5oWXwEAyBVZ9DFNrMCgF7OEDYmvi4",
        "query": "weather",
        "orientation": "landscape"
    }
    response = requests.get(url, params=params)
    data = response.json()
    image_url = data['urls']['regular']
    return image_url


def weather_photo(update, context):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–ª—É—á–∞–π–Ω–æ–µ —Ñ–æ—Ç–æ –ø–æ–≥–æ–¥–Ω–æ–≥–æ —è–≤–ª–µ–Ω–∏—è –≤ —á–∞—Ç.
    """
    chat_id = update.effective_chat.id
    image_url = get_random_weather_image()
    context.bot.send_photo(chat_id, photo=image_url)


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–≥–Ω–æ–∑–∞ –ø–æ–≥–æ–¥—ã
def get_weather(update: Update, context: CallbackContext):
    city = context.user_data.get('city')
    if not city:
        update.message.reply_text("–ì–æ—Ä–æ–¥ –Ω–µ —É–∫–∞–∑–∞–Ω. –£–∫–∞–∂–∏—Ç–µ –≥–æ—Ä–æ–¥, –Ω–∞–ø–∏—Å–∞–≤ /city <–≤–∞—à –≥–æ—Ä–æ–¥>")
    else:
        url = f"http://api.openweathermap.org/data/2.5/weather?q={city}&appid={API_KEY}&units=metric"
        response = requests.get(url)

        if response.status_code == 200:
            data = response.json()
            weather_en = data['weather'][0]['description']
            weather = translator.translate(weather_en)
            if (97 <= ord(weather[-1]) <= 122) or (65 <= ord(weather[0]) <= 90):
                weather = translate_text(weather_en)
            weather = weather.lower()
            temp = data['main']['temp']
            humidity = data['main']['humidity']
            wind_speed = data['wind']['speed']

            # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∏–∫–æ–Ω–æ–∫ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –ø–æ–≥–æ–¥—ã
            weather_icons = {
                "—è—Å–Ω–æ": "‚òÄÔ∏è",
                "–ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–±–ª–∞—á–Ω–æ—Å—Ç—å": "‚õÖ",
                "–Ω–µ—Å–∫–æ–ª—å–∫–æ –æ–±–ª–∞–∫–æ–≤": "‚õÖ",
                "–ø–∞—Å–º—É—Ä–Ω—ã–µ –æ–±–ª–∞–∫–∞": "‚òÅ",
                "—Å–Ω–µ–≥": "üå®Ô∏è",
                "—Å–Ω–µ–≥–æ–ø–∞–¥": "üå®Ô∏è",
                "–≤–µ—Ç–µ—Ä": "üí®",
                "—Ç—É–º–∞–Ω": "üå´Ô∏è",
                "–æ–±–ª–∞–∫–æ–≤": "‚òÅÔ∏è",
                "–æ–±–ª–∞—á–Ω–æ": "‚òÅÔ∏è",
                "–¥–æ–∂–¥—å": "üåßÔ∏è"
            }

            weather_icon = "‚ùì"  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é, –µ—Å–ª–∏ –Ω–µ—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–π –∏–∫–æ–Ω–∫–∏

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –ø–æ–≥–æ–¥—ã –∏ –≤—ã–±–∏—Ä–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –∏–∫–æ–Ω–∫—É
            for key, value in weather_icons.items():
                if key.lower() in weather.lower():
                    weather_icon = value
                    break

            message = f"–ü–æ–≥–æ–¥–∞ –≤ {city}:\n{weather_icon} {weather}\n–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {temp}¬∞C\n–í–ª–∞–∂–Ω–æ—Å—Ç—å: {humidity}%\n–°–∫–æ—Ä–æ—Å—Ç—å –≤–µ—Ç—Ä–∞: {wind_speed} –º/—Å"
        else:
            message = "–ò–∑–≤–∏–Ω–∏—Ç–µ, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."

        update.message.reply_text(message)


def start(update: Update, context: CallbackContext):
    update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –ø—Ä–æ–≥–Ω–æ–∑–∞ –ø–æ–≥–æ–¥—ã. –í–≤–µ–¥–∏ /help, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å —á—Ç–æ —è –º–æ–≥—É", reply_markup=markup)


def help_command(update: Update, context: CallbackContext):
    update.message.reply_text("–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/weather - –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã.\n"
        "/city - —É–∫–∞–∑–∞—Ç—å –≥–æ—Ä–æ–¥.\n"
        "/weather_list - –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ –¥–Ω–µ–π.\n"
        "/photo - –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–ª—É—á–∞–π–Ω–æ–µ —Ñ–æ—Ç–æ –ø–æ–≥–æ–¥–Ω–æ–≥–æ —è–≤–ª–µ–Ω–∏—è.\n"
        "/music - –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –º—É–∑—ã–∫–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª.\n"
        "/help - –ø–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥ –∏ –∏—Ö –æ–ø–∏—Å–∞–Ω–∏–µ.\n"
        "/start - –Ω–∞—á–∞—Ç—å –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å –±–æ—Ç–æ–º.\n")


def get_forecast(update: Update, context: CallbackContext):
    if not context.user_data.get('city'):
        update.message.reply_text("–ì–æ—Ä–æ–¥ –Ω–µ —É–∫–∞–∑–∞–Ω. –£–∫–∞–∂–∏—Ç–µ –≥–æ—Ä–æ–¥, –Ω–∞–ø–∏—Å–∞–≤ /city <–≤–∞—à –≥–æ—Ä–æ–¥>")
    else:
        city = context.user_data.get('city')
        url = f"http://api.openweathermap.org/data/2.5/forecast?q={city}&appid={API_KEY}&units=metric"
        response = requests.get(url)

        if response.status_code == 200:
            data = response.json()
            forecast_data = data['list']  # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ–≥–Ω–æ–∑–∞ –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ –¥–Ω–µ–π
            forecast_message = f"–ü—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ –¥–Ω–µ–π –≤ –≥–æ—Ä–æ–¥–µ {city}:\n"

            weather_icons = {
                "—è—Å–Ω–æ": "‚òÄÔ∏è",
                "–ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–±–ª–∞—á–Ω–æ—Å—Ç—å": "‚õÖ",
                "–Ω–µ—Å–∫–æ–ª—å–∫–æ –æ–±–ª–∞–∫–æ–≤": "‚õÖ",
                "–ø–∞—Å–º—É—Ä–Ω—ã–µ –æ–±–ª–∞–∫–∞": "‚òÅ",
                "—Å–Ω–µ–≥": "üå®Ô∏è",
                "—Å–Ω–µ–≥–æ–ø–∞–¥": "üå®Ô∏è",
                "–≤–µ—Ç–µ—Ä": "üí®",
                "—Ç—É–º–∞–Ω": "üå´Ô∏è",
                "–æ–±–ª–∞–∫–æ–≤": "‚òÅÔ∏è",
                "–æ–±–ª–∞—á–Ω–æ": "‚òÅÔ∏è",
                "–¥–æ–∂–¥—å": "üåßÔ∏è"
                # –¥–æ–±–∞–≤—å—Ç–µ –¥—Ä—É–≥–∏–µ —Ç–∏–ø—ã –ø–æ–≥–æ–¥—ã —Å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–º–∏ –∏–∫–æ–Ω–∫–∞–º–∏ –ø–æ –∂–µ–ª–∞–Ω–∏—é
            }

            for forecast in forecast_data:
                date_time = forecast['dt_txt']
                weather_en = forecast['weather'][0]['description']
                weather = translator.translate(weather_en)
                if (97 <= ord(weather[-1]) <= 122) or (65 <= ord(weather[0]) <= 90):
                    weather = translate_text(weather_en)
                weather = weather.lower()
                temp = forecast['main']['temp']

                weather_icon = "‚ùì"  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é, –µ—Å–ª–∏ –Ω–µ—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–π –∏–∫–æ–Ω–∫–∏

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –ø–æ–≥–æ–¥—ã –∏ –≤—ã–±–∏—Ä–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –∏–∫–æ–Ω–∫—É
                for key, value in weather_icons.items():
                    if key.lower() in weather.lower():
                        weather_icon = value
                        break

                forecast_message += f"\n–î–∞—Ç–∞/–í—Ä–µ–º—è: {date_time}\n{weather_icon} {weather}\n–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {temp}¬∞C\n--------"

            update.message.reply_text(forecast_message)
        else:
            update.message.reply_text("–ò–∑–≤–∏–Ω–∏—Ç–µ, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")


def main():
    updater = Updater(TOKEN, use_context=True)
    dispatcher = updater.dispatcher

    dispatcher.add_handler(CommandHandler("start", start))
    dispatcher.add_handler(CommandHandler("help", help_command))
    dispatcher.add_handler(CommandHandler("weather", get_weather))
    dispatcher.add_handler(CommandHandler("weather_list", get_forecast))
    dispatcher.add_handler(CommandHandler("city", save_city))
    dispatcher.add_handler(CommandHandler("photo", weather_photo))
    dispatcher.add_handler(CommandHandler("music", send_music))

    updater.start_polling()
    updater.idle()


if __name__ == '__main__':
    main()
